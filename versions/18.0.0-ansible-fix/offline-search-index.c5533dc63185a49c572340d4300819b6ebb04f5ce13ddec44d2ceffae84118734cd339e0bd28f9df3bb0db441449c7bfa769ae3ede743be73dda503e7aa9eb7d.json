[{"body":"SUPPORTED LANGUAGES  Ruby JavaScript Python  CONFIGURATION There are two ways to execute user scripts. They can either be submitted directly as a string to the /userScripts or /cases/{caseId}/userScripts endpoints in the script field, or you can place your script in a file in the user scripts directory and invoke them from the same endpoints by specifying the script name in the fileName field.\nThe user scripts directory is configurable and can be set in the application.properties file.\nuserScriptsLocation=\"/Path/To/UserScripts/Directory\" VARIABLES Each script has several common local variables injected, all of which are available both with and without a leading dollar sign ($):\n  current_case (also as currentCase):This is the Java nuix.Case object. It is only available in the case-specific endpoint /cases/{caseId}/userScripts.\n  utilities: This is the Java nuix.Utilities object for the current environment.\n  request: This is the Java HttpServletRequest object.\n  response: This provides methods for customising the object that is returned from the server. These methods are:\n setStatus(int httpStatusCode): This sets the HTTP status code. addHeader(String headerName, String headerValue): This adds a header to the actual HTTP response that comes back from the server. setBody(Object body): This sets the payload of the response.    progress : This provides methods for updating the progress of the script when run in an asynchronous manner. These methods are:\n setStatus(String status): This sets an arbitrary status value. This will be reflected in the ‘‘status’’ variable in the AsyncFunctionStatus response. setEstimatedFinalValue(long value)): This sets an estimate for the final progress value. This will be reflected in the ‘‘total’’ variable in the AsyncFunctionStatus response, and will be used as the denominator when calculating percent complete. setCurrentValue(long value): This sets the current progress value. This will be reflected in the ‘‘progress’’ variable in the AsyncFunctionStatus response, and will be used as the numerator when calculating percent complete.    custom_arguments (also as customArguments): This is the map of provided custom arguments.\n  ","excerpt":"SUPPORTED LANGUAGES  Ruby JavaScript Python  CONFIGURATION There are …","ref":"/getting-started/rest/scripting/introduction.html","title":"Introduction"},{"body":"Nuix REST SDK provides an API interface for the Nuix Engine. Through the API, you have access to core Nuix functionality such as case creation and data processing as well as the ability to cull case data using common Nuix search methods. Nuix RESTful Service aims to provide full parity between the native Nuix Engine and Scripting APIs.\n  ","excerpt":"Nuix REST SDK provides an API interface for the Nuix Engine. Through …","ref":"/getting-started/rest.html","title":"Nuix REST SDK"},{"body":"Nuix RESTful Service provides a wizard-based installer that guides you through the installation and initial configuration of the application. Follow the steps in this section to complete your installation of Nuix RESTful Service in a Windows environment.\nIf performing an upgrade, ensure that a backup of your existing Java Options is made prior to installation as these values will be overwritten. These values can be found in the bin/setenv.bat file within your installation directory. See Verifying Java Options after completing your upgrade for steps on adding these configurations back to installation.\n Installation To get started, perform the following steps to install:\n Download the Windows installer from the Nuix Customer Portal. Browse to the location that contains the installer. Right-click on the installer and choose Run as administrator, even if you are already running as an administrator. The installer may take a moment to prepare for the installation. When the initial preparation is complete, follow the steps within the wizard to complete the installation. From the Welcome Screen, click Next to begin. Note If a previous version of Nuix RESTful Service is already installed, the following options are provided:\n Update the existing installation Create a new installation in a separate location.  Choosing to update will bypass all further configuration steps within the wizard and begin the installation process using the configurations defined within the previous installation.\n  Read and understand the terms included in the Nuix End User License Agreement.  If you agree to the terms, select I accept the agreement, and click Next.   If installing for the first time, choose a location to install Nuix RESTful Service.  Click Next to accept the default location and proceed. Alternatively, click Browse to choose a specific location to install the application files.   Click Next to begin the installation. On the License Server Configuration screen, provide the following details then click Next:  Server address: The URL used to access a configured Nuix Management Server. Server port: The server port used to access the configured Nuix Management Server. Note To configure Nuix RESTful Service to use CLS for licensing, see Connecting to Nuix Cloud License Server (CLS) after completing the installation.     Enter credentials for an account that has access to the specified Licensing Server, then click Next. Review and make changes, if necessary, to the details provided on the Java \u0026 Folder Options screen.     Option Description     Java Options Optimize the Java settings used by Nuix RESTful Service to suit your hardware specifications. Define one argument per line. Default settings are recommended for most configurations. For help or assistance with tuning your JVM settings, contact the Nuix Support team at https://nuix.service-now.com/support.   IP Address or Hostname The URL that will be used to access Nuix RESTful Service.   Connection Timeout Specify the amount of time that REST should wait for a response after accepting a connection. Use a value of -1 to indicate no timeout.   HTTP Port The server port used to access Nuix RESTful Service.   Case Directory Specify a location where case files are stored.   User Scripts Directory Specify a location where user generated scripts are stored.   Logs Directory Specify a location to save logs generated by Nuix RESTful Service.    After reviewing the Java \u0026 Folder Options screen, click Next to continue. Specify how Nuix RESTful Service should be run:     Option Description     Service Run Nuix RESTful Service in the background as a Windows service.   Application Run Nuix RESTful Service as a standalone application. See Starting in Application Mode after installation completes for details on starting the application.   Start Service Select this checkbox, if the Service option was selected, to start the Nuix RESTful Service when installation completes.    Click Finish to complete the setup and exit the wizard.  Post-Installation Configurations After completing the installation of Nuix RESTful Service, the following configurations should be reviewed.\nWindows Service User Account If Nuix RESTful Service is configured to be run as a Windows service, the default Log On account associated with the service must be changed when performing a new installation to ensure proper operation of the application.\nTip If upgrading an existing installation, all previous configurations, including the service’s Log On account, are preserved.  To update the Log On account associated with Nuix RESTful Service:\n Use the Keyboard shortcut Win + R to open the Windows Run dialog box. Type services.msc in the text field, then press OK. In the Windows Services Manager, locate the Nuix-Rest service. Right-click on the service and select Properties. Select the Log On tab. Select This Account, and provide the appropriate credentials for an account to use Click Apply.  Verifying Java Options If upgrading from an installation earlier than version 7.8, backed up Java Options can be added back to the installation after the upgrade using the following steps.\nTo add any of these options to your existing installation:\n  Navigate to the location where Nuix RESTful Service is installed.\nDefault path: C:\\Program Files\\Nuix\\Nuix RESTful Service\n  Locate and open Nuix-REST.vmoptions within a text editor.\n  Modify the file, adding one argument per line.\n  Save and exit the editor.\n  Restart Nuix RESTful Service.\n  Starting in Application Mode If Nuix RESTful Service was configured to be run as a standalone application, the service must be manually started and stopped.\nTo start Nuix RESTful Service in Application Mode:\n  Open a command prompt.\n  Navigate to the location where Nuix RESTful Service is installed.\nDefault path: C:\\Program Files\\Nuix\\Nuix RESTful Service\n  Start the application using the following command:\nNuix-REST.exe /run\n  Stop the application using the following key combination within the command prompt:\nCtrl + C\n  Verifying Your Installation Once your installation is complete, complete the following steps to verify your deployment:\n  Open a web browser and enter the following URL\nlocalhost:8080/nuix-restful-service/svc/v2/about\n  If the installation was successful, the response body will return with information about the RESTful service.\n  { \"server\" : \"http://localhost:8080/nuix-restful-service/svc\", \"serverId\" : \"rest-oem-server\", \"startupTime\" : null, \"nuixRestfulVersion\" : null, \"engineVersion\" : null } API Documentation The Nuix RESTful Service provides a robust Application Programming Interface (API) that enables you to integrate your product or application with the Nuix Engine. For information about the endpoints that are available within the API, refer to the Nuix RESTful Service API documentation.\nThe API reference documentation is included with Nuix Restful Service and can be accessed at the following URL after installation.\nhttp://\u003clocalhost\u003e:8080/nuix-restful-service/svc/docs ","excerpt":"Nuix RESTful Service provides a wizard-based installer that guides you …","ref":"/getting-started/rest/installation/windows.html","title":"Installing on Windows"},{"body":"Before proceeding with the steps outlined below, ensure that the following prerequisites have been completed:\n Nuix RESTful Service is installed and running. Access to Nuix Licensing using any of the following options:  Nuix Management Server (NMS) Nuix Cloud License Server (CLS)    You will also need to know the following details about your installation.\n The server location of your REST installation.  Default location: \u003clocalhost\u003e:8080/nuix-restful-service/svc/ This URL is used throughout the provided examples to make calls to the API.   The location of the API reference documentation.  Default location: \u003clocalhost\u003e:8080/nuix-restful-service/svc/docs    Nuix RESTful Service is a language agnostic tool capable of interpreting calls over HTTP(s) using the method of your choice. To explore the API, any tool capable of performing HTTP requests can be used.\nPostman For the purposes of these quick start topics, simple cURL commands are provided that can be run within Postman. To use Postman, visit the following URL and download the API client for the operating system you are using.\nhttps://www.postman.com/downloads/\nOnce downloaded, run the installer to provision Postman on your computer. Details about the installation process can be located on the Postman website.\nhttps://learning.postman.com/docs/getting-started/installation-and-updates/\nAfter the installation finishes, launch the application by clicking the Postman icon on your desktop.\nImport the OpenAPI Specification To get up and running quickly, the Nuix RESTful Service OpenAPI specification can be imported directly into Postman. When importing the API specification, a template request for each available endpoint in the API is loaded into a new collection within Postman, eliminating the need to manually enter each endpoint.\nUse the following procedure to import the Nuix REST API specification into Postman:\n  Navigate to the Nuix RESTful Service reference documentation to download the OpenAPI 3 specification.\nDefault docs location: \u003clocalhost\u003e:8080/nuix-restful-service/svc/docs\n  Locate and right-click the URL at the top of the page, then select Copy link address to copy the location of the openapi-docs.json specification file.\n  Within Postman, find and click the Import button located in the top menu bar.\n  From the Import window, select the Link tab.\n  Paste in the URL that was previously copied and click Continue.\n  Confirm the details of the import and make the following additional selections:\n Under the Link this collection as menu, select Integration Test. Click Show advanced settings and confirm the following selections:       Advanced Option Recommended Setting     Naming requests Fallback   Request parameter generation Schema   Response parameter generation Schema   Folder organization Tags    Click Import.  When the import is complete, a new collection named Nuix REST-API Reference will be available from the Collections tab. The available endpoints are organized according to how they are listed in the API reference documentation.\nAdvanced Postman Setup Postman provides an interface that allows you to create and test calls to an API. Postman also allows you to configure variables for commonly used parameters that can be used to streamline your workflow when constructing API calls.\nUse the following procedure to setup a few basic configurations in your Postman installation:\n With Postman open, select an existing collection or click on New Collection to create a location to save any API calls that your create for the Nuix RESTful Service.  Provide a name for the new collection and optionally a description.   Select the Variables tab and define the following variables based on your installation:     Variable Current Value     base-url The URL of your Nuix RESTful Service installation. Default URL: http://127.0.0.1:8080/nuix-restful-service/svc   nuix-auth-token The authorization token that was issued to you when a license is acquired. Note: Since a license has not yet been acquired, leave this field empty.    Note The variable values identified in the table map to parameters used in the Nuix RESTful Service API.  Click Create to finalize the new collection.  The newly created collection will be displayed in the left sidebar of Postman under the Collections tab. As you create and test calls to the REST API, you can save them to your newly created collection and access them from this location within Postman.\nTo create a new request, click the + button located at the top of the builder window.\nTo save a request to your Postman collection, use the following procedure:\n  Expand the Save button drop-down menu next to the URL input field and select Save As from the menu.\n  Provide a Request name, such as Server Status, for the call.\n  Select the Collection to save the request in, then click Save.\n  ","excerpt":"Before proceeding with the steps outlined below, ensure that the …","ref":"/getting-started/rest/quick_start/environmentsetup.html","title":"Set Up your Development Environment"},{"body":"Take advantage of the full functional parity of our native and REST APIs to automate your workflow. Help your business achieve maturity by codifying processes, institutionalizing knowledge, decreasing reliance on individual contributors, and improving the transparency, repeatability, and defensibility of your daily work. Do you have home-grown applications, are you using Nuix in concert with another vendor’s software, or are you looking to bring Nuix into your “best-of-breed” ecosystem? You’re in luck! The Nuix APIs enable graceful integration of our capabilities.\nDoes this feel a bit complex? No worries there; our staff stands ready to assist with training, certification, support, and advice on how to best accomplish your goals. You can also visit the Nuix Community to see how others have addressed similar use cases, find resources on tackling this challenge, and even code samples to help you get started.\nFeel like you need even more help with this? Our partner network includes trained and certified systems integrators, supported by Nuix, ready to assist you with implementation. Nuix has an amazing capacity to act upon the most complex data problems, but when you run across something brand new or if you have a very specific use case and need to implement bespoke logic, we have you covered.\nNuix’s native Java, JRuby, and Jython APIs allow for quick extension of built-in functions. The REST API is intuitive and ideal for distributed development or invoking Nuix remotely. These APIs allow you to take advantage of our extensible nature by means of the various event handlers and callbacks seeded through relevant functions.\nMake our software’s data traversals your own, extend the platform to suit your needs, or jump start your net-new idea with the world’s most powerful and extensible data extraction engine. ","excerpt":"Take advantage of the full functional parity of our native and REST …","ref":"/overview.html","title":"Overview"},{"body":"Use the details and instructions in the following topics to download and install Nuix RESTful Service. The installer itself is a wizard-based program that provides on screen guidance to help you through the installation steps.\nThe key topics covered in this guide are:\n System Requirements Installing Nuix RESTful Service Configuration setup Locating API documentation  For any concerns regarding installation, use, or licensing of the Nuix RESTful Service, or if you require further information, contact the Nuix support team at https://nuix.service-now.com/support.\nSystem Requirements Before you begin using Nuix RESTful Service, it is important to properly install and configure any additional required software. System requirements as well as detailed instructions for installing and configuring Nuix RESTful Service are included within this guide.\nHardware Requirements The hardware configurations described in the following table are recommended for Nuix RESTful Service.\n   Size System Requirements Tomcat + JVM memory Workers OS Memory     Small Laptop with 16 GB RAM, Dual Core processor SSD 6 GB 2, each with 3 GB memory 4 GB   Medium Workstation with 32 GB RAM, Quad Core processor, 15 K RPM or SSD drives 8 GB 4, each with 5 GB memory 4 GB   Large Server with 96-256 GB RAM, Quad core processor, 15 K RPM or SSD drives 20-60 GB 8, each with 8-16 GB memory 4 GB    Software Requirements The following software is required:\n Licensing:  Nuix Management Server (NMS) 9.0 or above for server-based licensing.  Download here: https://download.nuix.com/releases/server Refer to the Installing Management Server section of the Nuix Management Server User Guide for installation instructions.   Nuix Cloud License Server (CLS) https://my.nuix.com   Optional: Nuix OCR Add-on using ABBYY to enable Optical Character Recognition.  Available for download at https://download.nuix.com/releases/addons Note: If Installing on Windows, the Microsoft Visual C++ 2010 Redistributable Package (x64) must be installed prior to installing the Nuix OCR Add-on.   Optional: Microsoft Office 2007/2010 to enable image rendering if you prefer not to use the Nuix internal rendering engine.  Operating System Support Nuix RESTful Service supports the latest versions of each of the following operating systems.\n   Operating System Version     Microsoft Windows 64-bit Windows 10    Windows Server 2019    Windows Server 2016 R2   Debian 9   Ubuntu 18.04 LTS    16.04 LTS    Authentication prerequisites Nuix RESTful Service only supports Basic authentication. Refer to the following prerequisites when configuring NMS.\nNote NTLM authentication is not supported.   Nuix Management Server:  Install Nuix Management Server (NMS) version 8.6 or later. Ensure that the Authentication mode is set to Basic built-in form authentication. Ensure that the NMS instance is broadcasting on the same address from which clients, including Nuix RESTful Service, will access it. Create an admin user in NMS for basic authentication. Ensure that licenses are enabled for users and groups that request licenses through Nuix RESTful services.    To purchase a license, contact sales@nuix.com for more information.\n","excerpt":"Use the details and instructions in the following topics to download …","ref":"/getting-started/rest/installation.html","title":"Installing Nuix RESTful Service"},{"body":"Updating NMS Connections After installing Nuix RESTful Service, you may need to eventually update the URL or credentials of the Nuix Management Server (NMS) being used for licensing. If this occurs, use the details within this section to update your NMS connection information.\nUse the following procedure to update the NMS connection used by Nuix RESTful Service:\n Close the application or stop the service to ensure that Nuix RESTful Service is not running. Navigate to the settings directory within the Nuix RESTful Service installation directory. Default path: \u003cInstalDir\u003e/Nuix/Nuix RESTful Service/settings Locate and open the application.properties file within a text editor. Within the file, locate and update the following property with the URL of the new NMS instance, including port number. nuix.registry.servers=\u003cServerURL\u003e  Save and exit the file. Restart Nuix RESTful Service. If the credentials to access the NMS instance have changed, continue with the following procedure.  Use the following procedure to update the credentials associated with the specified NMS connection:\n  With Nuix RESTful Service running, log in and acquire a license.\n  Using the acquired authentication token, call the licenseServer/credentials endpoint, providing updated credentials for your configured NMS instance.\nPUT/v1/licenseServer/credentials { \"username\": \"newuser\", \"password\": \"newsecurepassword\" }   If the call is made successfully, the provided password is automatically encrypted and added to the Nuix RESTful Service application.properties file along with the provided username, replacing any previous values.\nNote The newly encrypted password value is stored within a new nuix.license.server.securePassword property. The previously used property nuix.license.server.password used to store the plain text password will be left blank.  Connecting to Nuix Cloud License Server (CLS) Nuix RESTful Service can be configured to acquire licenses from either an available Nuix Management Server (NMS) or from the Nuix Cloud License Server. By default, a NMS connection can be established during installation, however, CLS can also be configured after the installation completes by following the procedure outlined within this section.\nPrerequisites:\nTo use CLS for licensing, you must have a valid CLS user account and credentials to connect to the Nuix portal (https://my.nuix.com).\nConfiguration:\nUse the following procedure to configure Nuix RESTful Service to retrieve licenses from CLS:\n  Navigate to the settings directory within the location where Nuix RESTful Service is installed.\n Windows: C:\\Program Files\\Nuix\\Nuix RESTful Service\\settings Debian/Ubuntu: /opt/nuix-restful-service/settings    Locate and open the application.properties file within a text editor.\n  Update the following properties with values based on the license source method being used.\n nuix.license.source= Specify the connection method being used for licensing. Valid values include:  cloud-server - Connect directly to CLS local-relay-server-local-users - Connect to an NMS instance that has been configured as a relay server to retrieve licenses from the CLS using NMS user authentication. local-relay-server-cls-users - Connect to an NMS instance that has been configured as a relay server to retrieve licenses from CLS using CLS user authentication. server - (default) Connect to an NMS instance for licensing. Note: For information on configuring NMS as a relay server, see the Cloud License Server Getting Started Guide.   nuix.registry.servers= The URL used to access the License server. nuix.license.server.username= Username of the CLS or NMS account being used for license acquisition. nuix.license.server.password= The password associated with the license server username.    Save and exit the file.\n  Restart Nuix RESTful Service for the changes to take effect.\n  ","excerpt":"Updating NMS Connections After installing Nuix RESTful Service, you …","ref":"/getting-started/rest/configuration/licenseconfiguration.html","title":"Licensing Configuration"},{"body":"Example Scripts  Ruby JavaScript Python   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51  class ElasticsearchCaseSubset def initialize(exportPath, query) @exportPath = exportPath @query = query @out = Hash.new @exceptions = Array.new end def process begin items = $current_case.search(@query); @out[:item_count] = items.size(); @out[:exportPath] = @exportPath options = { \"evidenceStoreCount\" =\u003e 1, \"includeFamilies\" =\u003e false, \"copyTags\" =\u003e false, \"copyComments\" =\u003e false, \"copyCustodians\" =\u003e false, \"copyItemSets\" =\u003e false, \"copyClassifiers\" =\u003e false, \"copyMarkupSets\" =\u003e false, \"copyProductionSets\" =\u003e false, \"copyClusters\" =\u003e false, \"copyCustomMetadata\" =\u003e false, \"caseMetadata\" =\u003e { \"name\" =\u003e \"ESCaseSubset\", \"description\" =\u003e \"About My simple Case\", \"investigator\" =\u003e \"Inspector Gadget\", \"elasticSearchSettings\" =\u003e { \"index.refresh_interval\" =\u003e \"60s\", \"nuix.transport.hosts\" =\u003e \"127.0.0.1:9300\", \"cluster.name\" =\u003e \"elasticsearch\", \"index.number_of_replicas\" =\u003e \"0\", \"nuix.index.auto_close\" =\u003e \"false\", \"index.number_of_shards\" =\u003e \"5\", \"xpack.security.transport.ssl.enabled\" =\u003e \"false\" } } } @out[:started] = Time.now.strftime('%Y-%m-%d_%H-%M-%S') $utilities.getCaseSubsetExporter().exportItems(items, @exportPath, options); rescue =\u003e exception @exceptions \u003c\u003c {:class =\u003e exception.class.name, :message =\u003e exception.message} end @out[:exceptions] = @exceptions @out[:finished] = Time.now.strftime('%Y-%m-%d_%H-%M-%S') return @out end end $response.setBody(ElasticsearchCaseSubset.new(\"/Cases/ESCaseSubsetUserScript\", \"file-extension:html\").process)     1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52  function ElasticsearchCaseSubset(exportPath, query) { this.exportPath = exportPath; this.query = query; } ElasticsearchCaseSubset.prototype.process = function() { var out = {}; try { var items = current_case.search(this.query); out['item_count'] = items.length; out['exportPath'] = this.exportPath; var options = {}; options['evidenceStoreCount'] = 1; options['includeFamilies'] = false; options['copyTags'] = false; options['copyComments'] = false; options['copyCustodians'] = false; options['copyItemSets'] = false; options['copyClassifiers'] = false; options['copyMarkupSets'] = false; options['copyProductionSets'] = false; options['copyClusters'] = false; options['copyCustomMetadata'] = false; var elasticSearchSettings = {}; elasticSearchSettings['index.refresh_interval'] = '60s'; elasticSearchSettings['nuix.transport.hosts'] = '127.0.0.1:9300'; elasticSearchSettings['cluster.name'] = 'elasticsearch'; elasticSearchSettings['index.number_of_replicas'] = '0'; elasticSearchSettings['nuix.index.auto_close'] = 'false'; elasticSearchSettings['index.number_of_shards'] = '5'; elasticSearchSettings['xpack.security.transport.ssl.enabled'] = 'false'; var caseMetadata = {}; caseMetadata['name'] = 'ESCaseSubset'; caseMetadata['description'] = 'About my simple case.'; caseMetadata['investigator'] = 'Inspector Gadget'; caseMetadata['elasticSearchSettings'] = elasticSearchSettings; options['caseMetadata'] = caseMetadata; out['started'] = new Date().getTime().toString(); utilities.getCaseSubsetExporter().exportItems(items, this.exportPath, options); } catch(err) { out['exceptions'] = err.message; } out['finished'] = new Date().getTime().toString(); return out; } $response.setBody(new ElasticsearchCaseSubset(\"/Cases/ESCaseSubsetUserScript\", \"file-extension:html\").process())     1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53  import time class ElasticsearchCaseSubset: def __init__(self, exportPath, query): self.exportPath = exportPath self.query = query self.out = {} self.exceptions = [] def process(self): try: items = current_case.search(self.query); self.out['item_count'] = len(items) self.out['exportPath'] = self.exportPath options = { \"evidenceStoreCount\": 1, \"includeFamilies\": False, \"copyTags\": False, \"copyComments\": False, \"copyCustodians\": False, \"copyItemSets\": False, \"copyClassifiers\": False, \"copyMarkupSets\": False, \"copyProductionSets\": False, \"copyClusters\": False, \"copyCustomMetadata\": False, \"caseMetadata\": { \"name\": \"ESCaseSubset\", \"description\": \"About My simple Case\", \"investigator\": \"Inspector Gadget\", \"elasticSearchSettings\": { \"index.refresh_interval\": \"60s\", \"nuix.transport.hosts\": \"127.0.0.1:9300\", \"cluster.name\": \"elasticsearch\", \"index.number_of_replicas\": \"0\", \"nuix.index.auto_close\": \"false\", \"index.number_of_shards\": \"5\", \"xpack.security.transport.ssl.enabled\": \"false\" } } } self.out['started'] = int(round(time.time() * 1000)) utilities.getCaseSubsetExporter().exportItems(items, self.exportPath, options); except Exception, e: self.exceptions.append(str(e)) self.out['finished'] = int(round(time.time() * 1000)) return self.out processor = ElasticsearchCaseSubset(\"/Cases/ESCaseSubsetUserScript\", \"file-extension:html\") response.setBody(processor.process())      Example Request  cURL wget   curl --location --request PUT 'http://localhost:8080/nuix-restful-service/svc/v1/cases/ab490af89d29460db0011f105ce6a340/userScripts' \\ --header 'nuix-auth-token: YOUR_AUTH_TOKEN' \\ --header 'Content-Type: application/json' \\ --header 'Accept: application/json' \\ --data-raw '{ \"fileName\": \"ElasticsearchCaseSubset.rb\", \"language\": \"RUBY\", \"async\": false }'   wget --no-check-certificate --quiet \\  --method PUT \\  --timeout=0 \\  --header 'nuix-auth-token: YOUR_AUTH_TOKEN' \\  --header 'Content-Type: application/json' \\  --header 'Accept: application/json' \\  --body-data '{ \"fileName\": \"ElasticsearchCaseSubset.rb\", \"language\": \"RUBY\", \"async\": false }' \\  'http://localhost:8080/nuix-restful-service/svc/v1/cases/ab490af89d29460db0011f105ce6a340/userScripts'    ","excerpt":"Example Scripts  Ruby JavaScript Python   1 2 3 4 5 6 7 8 9 10 11 12 …","ref":"/getting-started/rest/scripting/elasticsearchcasesubset.html","title":"Elasticsearch Case Subset"},{"body":"Example Scripts  Ruby JavaScript Python   1 2 3 4 5 6 7 8  query=\"file-extension:pdf\" items=$current_case.searchUnsorted(query) items.each do |item| item.addTag(\"pdf\") end response.setBody(items.length())     1 2 3 4 5 6 7 8  query=\"file-extension:pdf\" items=current_case.searchUnsorted(query) for (item in items) { item.addTag(\"pdf\"); } response.setBody(items.length)     1 2 3 4 5 6 7  query=\"file-extension:pdf\" items=current_case.searchUnsorted(query) for item in items: item.addTag(\"pdf\") response.setBody(len(items))      Example Request  cURL wget   curl --location --request PUT 'http://localhost:8080/nuix-restful-service/svc/v1/cases/{caseId}/userScripts' \\ --header 'nuix-auth-token: YOUR_AUTH_TOKEN' \\ --header 'Content-Type: application/json' \\ --header 'Accept: application/json' \\ --data-raw '{ \"fileName\": \"tagItems.rb\", \"language\": \"RUBY\", \"async\": false }'   wget --no-check-certificate --quiet \\  --method PUT \\  --timeout=0 \\  --header 'nuix-auth-token: YOUR_AUTH_TOKEN' \\  --header 'Content-Type: application/json' \\  --header 'Accept: application/json' \\  --body-data '{ \"fileName\": \"tagItems.rb\", \"language\": \"RUBY\", \"async\": false }' \\  'http://localhost:8080/nuix-restful-service/svc/v1/cases/{caseId}/userScripts'    ","excerpt":"Example Scripts  Ruby JavaScript Python   1 2 3 4 5 6 7 8 …","ref":"/getting-started/rest/scripting/tagging.html","title":"Tagging"},{"body":"","excerpt":"","ref":"/getting-started/rest/configuration.html","title":"Configuring Nuix RESTful Service"},{"body":"Nuix provides several methods for integrating the Nuix Engine into your existing workflows and processes. Choose from the available entry points below to quickly get up and running.\n  ","excerpt":"Nuix provides several methods for integrating the Nuix Engine into …","ref":"/getting-started.html","title":"Getting Started"},{"body":"Nuix RESTful Service provides a wizard-based installer that guides you through the installation and initial configuration of the application. Follow the steps in this section to complete your installation of Nuix RESTful Service in a Linux environment.\nDepending on the configuration of your system, Nuix RESTful Service can be installed into both graphical and non-graphical environments using the same installer.\nWarning A JRE is not bundled with the Linux installers provided by Nuix RESTful Service. The latest version of Java 11 for your environment must be installed prior to installing Nuix RESTful Service on Linux.  If performing an upgrade, ensure that a backup of your existing Java Options is made prior to installation as these values will be overwritten. These values can be found in the bin/setenv.sh file within your installation directory. See Verifying Java Options after completing your upgrade for steps on adding these configurations back to installation.\n Prerequisites The following prerequisites must be installed prior to using Nuix RESTful Service in a Linux environment.\n GTK+ graphical user interface library X11 Screen Saver extension library Chromium browser (if using OCR)  Perform the following steps to install all prerequisites:\n Open a terminal within your Linux environment: Based on your operating system, enter one of the following commands to install the dependences:  Debian/Ubuntu: apt-get install libgtk-3-0 libxss1 xvfb   If using the Nuix OCR Addon, install the Chromium browser using the following command: sudo apt install --assume-yes chromium-browser  After installation completes, start the X-Server Virtual Framebuffer using the following command: Xvfb :1 \u0026  Note This command only needs to be performed after the initial installation or if the xvfb process is ever terminated.    Installation Perform the following steps to install Nuix RESTful Service.\n Download the Linux installer from the Nuix Customer Portal. Open a terminal and navigate to the directory that contains the installer. Enter the following command to untar the installer: tar xvf [path to installer]rest-OEM-linux_[version].tar  Enter the following command to assign execute privileges for the installer to the current user: sudo chmod u+x rest-OEM-linux_[version].sh  Enter the following command to run the installer: ./rest-OEM-linux_[version].sh The installer may take a moment to prepare the wizard. When complete, follow the steps within the wizard to complete the installation. If installing in a non-graphical environment, the following steps will be presented within the terminal.\n From the Welcome Screen, click Next to begin.  Note If a previous version of Nuix RESTful Service is already installed, the following options are provided:\n Update the existing installation Create a new installation in a separate location.  Choosing to update will bypass all further configuration steps within the wizard and begin the installation process using the configurations defined within the previous installation.\n Read and understand the terms included in the Nuix End User License Agreement.  If you agree to the terms, select I accept the agreement, and click Next.   If installing for the first time, choose a location to install Nuix RESTful Service.  Click Next to accept the default location and proceed. Alternatively, click Browse to choose a specific location to install the application files.   Click Next to perform the installation. On the License Server Configuration screen, provide the following details then click Next:  Server address: The URL used to access a configured Nuix Management Server. Server port: The server port used to access the configured Nuix Management Server. Note To configure Nuix RESTful Service to use CLS for licensing, see Connecting to Nuix Cloud License Server (CLS) after completing the installation.     Enter credentials for an account that has access to the specified Licensing Server, then click Next. Review and make changes, if necessary, to the details provided on the Java \u0026 Folder Options screen.     Option Description     Java Options Optimize the Java settings used by Nuix RESTful Service to suit your hardware specifications. Define one argument per line. Default settings are recommended for most configurations. For help or assistance with tuning your JVM settings, contact the Nuix Support team at https://nuix.service-now.com/support.   IP Address or Hostname The URL that will be used to access Nuix RESTful Service.   Connection Timeout Specify the amount of time that REST should wait for a response after accepting a connection. Use a value of -1 to indicate no timeout.   HTTP Port The server port used to access Nuix RESTful Service.   Case Directory Specify a location where case files are stored.   User Scripts Directory Specify a location where user generated scripts are stored.   Logs Directory Specify a location to save logs generated by Nuix RESTful Service.    After reviewing the Java \u0026 Folder Options screen, click Next to continue. Specify how Nuix RESTful Service should be run:     Option Description     Service Run Nuix RESTful Service in the background as a Windows service.   Application Run Nuix RESTful Service as a standalone application. See Starting in Application Mode after installation completes for details on starting the application.   Start Service Select this checkbox, if the Service option was selected, to start the Nuix RESTful Service when installation completes.    Click Finish to complete the setup and exit the wizard.  Post-Installation Configuration After completing the installation of Nuix RESTful Service, the following configurations should be considered.\nVerifying Java Options If upgrading an existing installation to version 7.8, any backed up Java Options can be added back to the upgraded installation using the following steps.\nTo add any of these options to your existing installation:\n Navigate to the location where Nuix RESTful Service is installed.  Debian/Ubuntu default path: /opt/nuix-restful-service   Locate and open Nuix-REST.vmoptions within a text editor. Modify the file, adding one argument per line. Save and exit the editor. Restart Nuix RESTful Service.  Starting in Application Mode If Nuix RESTful Service was configured to be run as a standalone application, the service must be manually started and stopped.\nTo start Nuix RESTful Service in Application Mode:\n Open a terminal. Navigate to the location where Nuix RESTful Service is installed.  Debian/Ubuntu default path: /opt/nuix-restful-service   Start the application using the following command: ./nuix-rest start  Stop the application using the following command: ./nuix-rest stop   Verifying Your Installation Once your installation is complete, complete the following steps to verify your deployment:\n Open a web browser and enter the following URL localhost:8080/nuix-restful-service/svc/v2/about  If the installation was successful, the response body will return with information about the RESTful service. \"server\" : \"http://localhost:8080/nuix-restful-service/svc\", \"serverId\" : \"rest-oem-server\", \"startupTime\" : null, \"nuixRestfulVersion\" : null, \"engineVersion\" : null }   ","excerpt":"Nuix RESTful Service provides a wizard-based installer that guides you …","ref":"/getting-started/rest/installation/linux.html","title":"Install on Linux"},{"body":"Before making any calls to the Nuix RESTful Service API, it is best practice to first ensure that the service is running and available.\nThe Nuix RESTful Service server status can be checked using the following GET request to the /about endpoint.\ncURL:\ncurl -X GET \"http://127.0.0.1:8080/nuix-restful-service/svc/about\" -H \"accept: application/vnd.nuix.v2+json\" If the service is available, a response similar to the following example will be returned.\nResponse:\n{ \"server\" : \"http://localhost:8080/nuix-restful-service/svc\", \"serverId\" : \"rest-oem-server\", \"startupTime\" : null, \"nuixRestfulVersion\" : null, \"engineVersion\" : null }  Note: In this example, some of the response values have returned null values. These values are intentionally not returned because the request was submitted without an authentication token.  ","excerpt":"Before making any calls to the Nuix RESTful Service API, it is best …","ref":"/getting-started/rest/quick_start/checkingserverstatus.html","title":"Checking Server Status"},{"body":"Nuix provides an API which supports execution of scripts written in Ruby, Python and ECMA Script (AKA Javascript). Scripts can be used to automate almost anything that can be accomplished manually through the Graphical User Interface (GUI) of Nuix Workstation. Scripts also enable more advanced processes which cannot be easily accomplished manually in the GUI. A script can be executed several different ways:\nFrom the scripts menu The scripts menu in Nuix Workstation provides a convenient way to execute scripts:\nThe scripts menu in Nuix Workstation provides a convenient way to execute scripts:\n System level scripts accessible to all users on the system can be placed in the directory C:\\ProgramData\\Nuix\\Scripts User level scripts accessible to a particular user can be placed in the directory C:\\Users\\USERNAME\\AppData\\Roaming\\Nuix\\Scripts where USERNAME is the specific user’s name.  Scripts placed in these directories are discovered in one of the following ways:\n As individual files with extensions .rb for Ruby, .py for Python and .js for ECMA Script (AKA Javascript) (see below) As script bundles (see below)  Individual files As individual files with extensions .rb for Ruby, .py for Python and .js for ECMA Script (AKA Javascript) (see below) As script bundles (see below)\n .rb for Ruby .py for Python .js for ECMA Script (AKA Javascript)  While populating entries in the Scripts menu, Nuix inspects the first several lines of each script file found for the presence of several special comments:\n Menu Title – Specifies the label used for this script’s entry in the Scripts menu. Needs Case – Specifies whether this script requires a case to be open in the Workstation interface before the script can be ran. A value of true means the script will be disabled in the menu when no case is open. If your script is going to work with the global variable $current_case, it is a good idea to set this to true. Needs Selected Items – Specifies whether this script requires items to be checked in the results view before this script can be ran. A value of true means the script will be disabled in the menu if no items are currently checked in the results view. If your script is going to work with the global variable $current_selected_items, it is a good idea to set this to true.  An example of this in a Ruby script looks like the following:\n# Menu Title: My Export Script # Needs Case: true # Needs Selected Items: true puts \"Export code would go here...\" This is convenient for single file scripts. As a script gets more complex it may begin to span multiple files, in which case you may want to instead use a script bundle (see below).\nScript bundles Scripts which are more complex and span multiple files are better served as a script bundle. When using a script bundle multiple script files are represented in the scripts menu as only a single menu entry. For example, imagine you have a Ruby script which consists of 3 files, the main script file and 2 supporting files which are loaded by the main script file at run-time. Without a script bundle, each of the 3 files would get a script menu entry, while only 1 of those files is intended actually be executed directly.\nTo make a script bundle, you need to do several things:\n Place your script in a sub-directory of a scripts folder with a name ending in .nuixscript, for example a directory named MyExportScript.nuixscript In your script bundle sub-directory have a file named metadata.properties (more on this below) In your script bundle sub-directory have one or more script files (.rb, .py, .js)  The metadata.properties file is a standard Java properties formatted file. This files provides Nuix information about the script similar to the special comments which can be provided in individual script files. This file supports the following entries:\n MainScript – This required entry instructs Nuix of the primary script file in the Script Bundle which is to be executed when the corresponding Scripts menu entry is clicked. MenuTitle – This entry instructs Nuix as to what label should be used in the Scripts menu for this script. NeedsCase – This entry instructs Nuix as to whether your script requires that a case be open in the Nuix Workstation GUI before being ran. When this value is set to true, the script’s entry in the Scripts menu will be disabled if a case is not currently open. NeedsSelectedItems – This entry instructs Nuix as to whether you script requires that items are checked in the results view before being ran. When this value is set to true, the script’s entry in the Scripts menu will be disabled if no items are currently checked in the results view. SmallIcon – This entry specifies the icon used for this script’s menu entry. Value provided should be the file name (without directory) of an image file in the same directory as the metadata.properties file. Most common image formats are supported, but PNG files are the convention. MenuKeyboardShortcut – This entry specifies a keyboard shortcut to be associated to this script’s menu entry. MenuMnemonic – This entry specifies the mnemonic underlined in the menu. Provided value should be a single character which is present in the name.  An example of this file might look like the following:\nMainScript=MyExportScript.rb MenuTitle=My Export Script NeedsCase=true NeedsSelectedItems=true SmallIcon=icon.png MenuKeyboardShortcut=ctrl shift E MenuMnemonic=E From the Script Console You can also run a script using the Script Console dialog in the Workstation interface:\nOnce the script console dialog is up, you may paste or type your code into the upper text area. Make sure you select the appropriate script language. Then click the Execute button to run it. While your script is running you may click the Cancel button to terminate it early.\nNote When a script is executed via the scripts menu, the output of that script will also show up in the script console’s output area.  From the Command Line Interface When you install Nuix Workstation, part of that installation is the executable file nuix_console.exe. This is a “headless” version of Nuix which specializes in executing scripts. When ran, this version of Nuix will startup without a GUI and then proceed to execute the script you specify.\nIf you have Nuix Workstation installed here: C:\\Program Files\\Nuix\\Nuix 7.8\nAnd you have a Ruby script located here: D:\\NuixScripts\\MyExportScript.rb\nThan you can run the following command to run that script using nuix_console.exe:\n\"C:\\Program Files\\Nuix\\Nuix 7.8\\nuix_console.exe\"\n\"D:\\NuixScripts\\MyExportScript.rb\"\nnuix_console.exe supports many of the same arguments that the Nuix Workstation executable does: \"C:\\Program Files\\Nuix\\Nuix 7.8\\nuix_console.exe\" -Xmx24g -licencesourcetype dongle \"D:\\NuixScripts\\MyExportScript.rb\"\nIf you intend to run nuix_console.exe with a license obtained from a Nuix license server that requires username/password authentication, you will need to set environment variables with appropriate values for username and password. In Windows this can be accomplished by doing the following in a batch file:\nSET NUIX_USERNAME=username SET NUIX_PASSWORD=password \"C:\\Program Files\\Nuix\\Nuix 7.8\\nuix_console.exe\" ^ -Xmx24g ^ -Dnuix.registry.servers=127.0.0.1 ^ \"D:\\NuixScripts\\MyExportScript.rb\" It is worth noting that scripts executed using nuix_console.exe will not have the following variables populated as they would be in the GUI:\n $current_case – Since there is no GUI for the user to have opened a case in. $current_selected_items – Since there is no GUI for the user to have selected items in. $window – Since there is no GUI for the Window object to refer to.  ","excerpt":"Nuix provides an API which supports execution of scripts written in …","ref":"/getting-started/running_scripts/running-scripts.html","title":"Running Scripts In Nuix Workstation"},{"body":" Ruby JavaScript Python   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51  class CustomProcessor def initialize(case_path, case_name, process_this) @case_path = case_path @case_name = case_name @process_this = process_this @out = Hash.new @items = Array.new @exceptions = Array.new end def process begin case_settings = {:compound =\u003e false, :name =\u003e \"#{@case_name}\", :description =\u003e \"Simple Case\", :investigator =\u003e \"Inspector Gadget\"} current_case = $utilities.caseFactory.create(\"/Cases/CustomProcessing\", case_settings) processor = current_case.createProcessor() processor.processing_settings = {:report_processing_status =\u003e \"physical_files\", :enable_custom_processing =\u003e [\"text\", \"properties\", \"binary\"] } processor.parallel_processing_settings = {:worker_count =\u003e 2, :worker_memory =\u003e 2000 } processor.when_item_processed do | callback | begin item = Hash.new item[:mimetype] = callback.getMimeType() unless callback.getBinaryFile().nil? item[:path_to_binary] = callback.getBinaryFile().toString() end item[:properties] = callback.properties item[:text] = callback.getText() item[:path] = callback.path @items \u003c\u003c item rescue =\u003e exception @exceptions \u003c\u003c {:class =\u003e exception.class.name, :message =\u003e exception.message} end end container = processor.new_evidence_container(\"Evidence-#{Time.now.strftime('%Y-%m-%d_%H-%M-%S')}\") container.addFile(@process_this) container.save @out[:processing_started] = Time.now.strftime('%Y-%m-%d_%H-%M-%S') processor.process @out[:final_item_count] = @items.length() current_case.close rescue =\u003e exception @exceptions \u003c\u003c {:class =\u003e exception.class.name, :message =\u003e exception.message} end @out[:exceptions] = @exceptions @out[:items] = @items @out[:processing_finished] = Time.now.strftime('%Y-%m-%d_%H-%M-%S') return @out end end $response.setBody(CustomProcessor.new(\"/Cases\", \"CustomProcessing\", \"/Engines/9.0.0.171/doc/api\").process)     1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68  function CustomProcessor(casePath, caseName, processThis) { this.casePath = casePath; this.caseName = caseName; this.processThis = processThis; this.items = []; this.exceptions = []; this.out = {}; } CustomProcessor.prototype.process = function() { try { var caseSettings = {}; caseSettings['compound'] = false; caseSettings['name'] = this.caseName; caseSettings['description'] = 'Simple Case'; caseSettings['investigator'] = 'Inspector Gadget'; var currentCase = utilities.getCaseFactory().create(this.casePath + '/' + this.caseName, caseSettings); var processor = currentCase.createProcessor(); var processingSettings = {}; processingSettings['report_processing_status'] = 'physical_files'; processingSettings['enable_custom_processing'] = [\"text\", \"properties\", \"binary\"]; var parallelProcessingSettings = {}; parallelProcessingSettings['worker_count'] = 2; parallelProcessingSettings['worker_memory'] = 2000; processor.setProcessingSettings(processingSettings); processor.setParallelProcessingSettings(parallelProcessingSettings); var self = this; processor.whenItemProcessed(function(callback) { try { var item = {}; item['mimtype'] = callback.getMimeType(); if(callback.getBinaryFile()) { item['path_to_binary'] = callback.getBinaryFile().toString(); } item['properties'] = callback.getProperties(); item['text'] = callback.getText(); item['path'] = callback.getPath(); self.items.push(item); } catch (err) { self.exceptions.push(err.message); } }); var startTime = new Date().getTime().toString(); var container = processor.newEvidenceContainer('Evidence-' + startTime); container.addFile(this.processThis); container.save(); this.out['processing_started'] = startTime; processor.process(); this.out['final_item_count'] = this.items.length; currentCase.close(); } catch (err) { this.exceptions.push(err.message); } this.out['exceptions'] = this.exceptions; this.out['items'] = this.items; this.out['processing_finished'] = new Date().getTime().toString(); return this.out; } $response.setBody(new CustomProcessor(\"/Cases\", \"CustomProcessing\", \"/Engines/9.0.0.171/doc/api\").process())     1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58  import time import os class CustomProcessor: def __init__(self, case_path, case_name, process_this): self.case_path = case_path self.case_name = case_name self.process_this = process_this self.out = {} self.exceptions = [] self.items = [] def when_item_processed(self, callback): try: item = {} item['mimetype'] = callback.getMimeType(); if callback.getBinaryFile() is not None: item['path_to_binary'] = callback.getBinaryFile().toString() item['properties'] = callback.getProperties() item['text'] = callback.getText() item['path'] = callback.getPath() self.items.append(item) except Exception, e: self.exceptions.append(str(e)) def process(self): try: case_settings = {\"compound\": False, \"name\": self.case_name, \"description\": \"Simple Case\", \"investigator\": \"Inspector Gadget\"} current_case = utilities.getCaseFactory().create(os.path.join(self.case_path, self.case_name), case_settings) processor = current_case.createProcessor() processing_settings = {\"report_processing_status\": \"physical_files\", \"enable_custom_processing\": [\"text\", \"properties\", \"binary\"]} parallel_processing_settings = {\"worker_count\": 2, \"worker_memory\": 2000} processor.setProcessingSettings(processing_settings) processor.setParallelProcessingSettings(parallel_processing_settings) processor.whenItemProcessed(self.when_item_processed) started = int(round(time.time() * 1000)) container = processor.newEvidenceContainer(\"Evidence-\" + str(started)) container.addFile(self.process_this) container.save() self.out['processing_started'] = started processor.process() self.out['final_item_count'] = len(self.items) current_case.close() except Exception, e: self.exceptions.append(str(e)) self.out['finished'] = int(round(time.time() * 1000)) self.out['exceptions'] = self.exceptions self.out['items'] = self.items return self.out processor = CustomProcessor(\"/Cases\", \"CustomProcessing\", \"/Engines/9.0.0.171/doc/api\") response.setBody(processor.process())       cURL wget   curl --location --request PUT 'http://localhost:8080/nuix-restful-service/svc/v1/userScripts' \\ --header 'nuix-auth-token: YOUR_AUTH_TOKEN' \\ --header 'Content-Type: application/json' \\ --header 'Accept: application/json' \\ --data-raw '{ \"async\": false, \"fileName\": \"customProcessing.rb\", \"language\": \"RUBY\" } '   wget --no-check-certificate --quiet \\  --method PUT \\  --timeout=0 \\  --header 'nuix-auth-token: YOUR_AUTH_TOKEN' \\  --header 'Content-Type: application/json' \\  --header 'Accept: application/json' \\  --body-data '{ \"async\": false, \"fileName\": \"customProcessing.rb\", \"language\": \"RUBY\" } ' \\  'http://localhost:8080/nuix-restful-service/svc/v1/userScripts'    ","excerpt":" Ruby JavaScript Python   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 …","ref":"/getting-started/rest/scripting/customprocessing.html","title":"Custom Processing"},{"body":"","excerpt":"","ref":"/getting-started/rest/scripting.html","title":"User Scripts"},{"body":"Follow the procedures in this section to install and deploy the Nuix RESTful Service Docker image within a Ubuntu Linux environment using Compose.\nThe Nuix RESTful Service Docker image is intended for development purposes only. Usage of this installation in a production environment is not supported.\n Prerequisites Before proceeding, the following prerequisites must be installed within your environment:\n Docker Engine: An open-source containerization technology.  Visit Get Docker Engine - Community for Ubuntu for complete instructions on installing the Docker Engine on Ubuntu. Note:To ensure proper operation, the Docker Engine requires a minimum of 8 GB of memory.     Docker Compose: A tool used to define and run multi-container Docker applications.  Visit Install Docker Compose for complete instructions on installing Docker Compose. Note:The Docker Engine must be installed and running before installing Docker Compose. View the Post-installation steps for Linux for details on configuring different startup methods for Docker.      Preparing the Target Directory Use the following procedure to download and extract the Nuix RESTful Service Linux archive.\n Download the Docker Image for Linux 64-bit package from the Nuix Customer Portal. Open a terminal and enter the following command to create a target directory for the package: sudo mkdir -p /opt/nuix/rest  Note: /opt/nuix/rest is the recommended location for this package.   Extract the contents of the rest-docker-compose archive to the target directory: sudo tar xzf rest-docker-compose-VERSION.tar.gz -C /opt/nuix/rest  Navigate to the target directory to view the extracted contents of the package: cd /opt/nuix/rest   The rest directory contains the directory structure described in the following table:\n . |-- bin # Binaries and support scripts |-- clean.sh # Script to remove user data and restore directories |-- configure.sh # Script to configure the Nuix License Server settings |-- create-service.sh # Script to create a service |-- install.sh # Script to install the Nuix RESTful Service |-- cases # Default Inventory Location for cases on the host |-- docs # Documentation |-- exports # Default Nuix exports directory on the host |-- images # Distributed Docker images |-- logs # Default Nuix logs directory on the host |-- raw-data # Default Nuix raw-data directory on the host |-- scripts # Default Nuix scripts directory on the host |-- secrets # Sensitive properties used by the Nuix Rest SDK |-- nuix-rest-secret.properties # Sensitive Nuix License Server properties |-- tmp # Default Nuix tmp directory on the host |-- user-data-extra # Default Nuix user-data-extra folder on the host |-- .env # Docker compose environment configuration. |-- rest.env # Nuix RESTful Service environment configuration |-- docker-compose.yml # Docker compose file  Installing the Docker Image After extracting the package to the target directory, use the following procedure to complete the installation process using the provided scripts.\n Open a terminal and navigate to the target directory. cd /opt/nuix/rest  Enter the following command to begin the installation. sudo ./bin/install.sh The install.sh script verifies that all prerequisites are in place before loading the included Nuix RESTful service Docker images and calling all other scripts that are required for the installation. Note: The first time install.sh is run, a warning is returned indicating that rest.env is missing and will be created from an example file that contains default values. This is expected and can be ignored. See Post-Installation Configuration after completing the installation for information on modifying the default environment configurations.   When prompted, specify the Nuix License Server that will be used for licensing.  Enter a URL where the license server can be accessed. Provide user credentials for an account associated within the specified license server.    After installation completes, proceed to the remaining sections in this guide for information on:\n Configuring environment settings Updating Nuix License Server settings Removing user data form an existing installation Starting Nuix RESTful Service Verifying your installation  Post-Installation Configuration After completing the installation of Nuix RESTful Service, the following configurations can be made to the installation.\nConfiguring Environment Settings Nuix RESTful Service includes several configurations that can be modified to change the how the application operates.\nUse the following procedure to access the available environment configurations:\n Open a terminal and navigate to the target directory. cd /opt/nuix/rest  Using the editor of your choice, open the following configuration file. rest.env  Review the properties included within the file and make changes as necessary.  The following table provides details about the properties that are configurable.\n   Option Description     JAVA_OPTS_HEAP Optimize the Java heap size ranges used by Nuix RESTful service. * -Xms512m Default minimum memory allocation * -Xmx6g Default maximum memory allocation   publicURL The URL used to access Nuix RESTful Service.   logging_level Specify the logging level to be used with REST.   logging_level_com_nuix_us Specify the logging level to be used for workers.   casePrivilegeSecurityEnabled Enable or disable the ability to restrict cases from view using case security.   threadpool_nativesearch The number of threads available for retrieving item metadata when searches are performed.   threadpool_asyncfunction The number of threads available to perform background tasks such as tagging, exclusions, or highlighting.   threadpool_searchUnsortedManager The number of threads available for retrieving item counts for the provided analytics.   threadpool_searchUnsorted The number of threads available to run queries and aggregate the data required to populate the provided analytics.   serverId A unique identifiable name for the REST instance.   xpack_security_transport_ssl_enabled Enable or disable TLS/SSL.   ignoreDerbyCases Restrict REST from processing Derby-based cases.   nuix_engine_userDataDirs Specify the locations where artifacts used by the Nuix Engine are stored.   inventoryLocations Specify the location where cases are stored.\nMapped network drives can be configured within Linux environments if a symbolic link has been created between the mapped and local drive.   sandboxDirectory Specify a location where unprocessed evidence is stored.   server_contextPath Specify a context path prefix to use within the Nuix RESTful Service URL.   workerAgentStatusHistoryUpdateIntervalMs Specify the frequency (in milliseconds) in which worker agent status is retrieved.   workerAgentStatusHistoryMaxValues Specify the maximum number of times that worker agent status can be retrieved.   registerAsApplication Specify how Nuix RESTful Service should be run.   maxSimultaneousWorkers Specify the total number of workers that can be distributed by this REST instance at any given time.   workerAgentTempPath Specify the path to a directory, such as /tmp, that can be used by worker agents for temporary storage. The specified location should be on performant local storage with ample space for best results.   nuix_logdir Specify the directory where logs generated by Nuix RESTful Service are stored.   nuix_engine_path Specify the directory where the Nuix Engine is installed.   logging_file Specify the path and file name to use for the log file.   logging_config Specify the path and file name of the logging configuration file.    When finished, save and exit the file, then restart Nuix RESTful Service for the changes to take effect.  Updating Nuix License Server Settings If required, the configured Nuix License Server can be updated after the initial installation using a provided script.\nUse the following procedure to update the Nuix License Server connection details:\n Open a terminal and navigate to the target directory. cd /opt/nuix/rest  Enter the following command to run the script and update the connection details. sudo ./bin/configure.sh  When prompted, specify the Nuix License Server to be used for licensing.  Enter a URL where the license server can be accessed. Provide user credentials for an account associated within the specified license server.    The updated settings are saved to the ./secrets/nuix-rest-secret.properties file as well as the ./rest.env file.\nOnce complete, restart Nuix RESTful Service for the changes to take effect.\nRemoving Existing Data Nuix RESTful Service provides a script that allows all case, evidence, and user data to be removed without impacting the installation. This script can be used to return the Docker image back to a default state when testing different scenarios.\nTo remove existing data from the installation: Warning All existing cases, engine artifacts, and raw evidence will be deleted.   Open a terminal and navigate to the target directory. cd /opt/nuix/rest  Enter the following command to run the script. sudo ./bin/clean.sh   Running Nuix RESTful Service Once the Docker image has been properly deployed and configured on your system, Docker Compose can be used to quickly start Nuix RESTful Service.\nTo start the service in the foreground:\n Navigate to the target directory where Nuix RESTful Service is installed: cd /opt/nuix/rest  Start the service using the following command: sudo docker-compose up  Note:This startup method returns all logs within the terminal which may be helpful when troubleshooting an issue. While the service is running, the terminal cannot be used.   To stop the service, press Ctrl-C within the terminal.  To start the service in the background:\n Navigate to the target directory where Nuix RESTful Service is installed: cd /opt/nuix/rest  Start the service using the following command: sudo docker-compose up -d  Note: This startup method does not return logs but allows continued use of the terminal.   To stop the service, enter the following command: sudo docker-compose stop   Starting as a Service The installation script provided with Nuix RESTful Service creates all required Docker entries to allow the image to be run as a service. By default, the services are not started or configured to start on boot, however, these configurations can be changed using the following commands.\n Start as a service: sudo systemctl start docker-compose@nuix-rest-sdk  Stop the service from running: sudo systemctl stop docker-compose@nuix-rest-sdk  Configure Nuix RESTful Service to run at startup: sudo systemctl enable docker-compose@nuix-rest-sdk   Verifying the Installation Once your installation is complete, verify your deployment using one of the following methods.\n From a web browser, access the following URL: localhost:8080/nuix-restful-service/svc/v2/about  From the terminal, enter the following cURL: curl http://localhost:8080/nuix-restful-service/svc/v2/about   If the installation was successful, the response body for either method will return with information about the RESTful service.\n{ \"server\" : \"http://localhost:8080/nuix-restful-service/svc\", \"serverId\" : \"rest-oem-server\", \"startupTime\" : null, \"nuixRestfulVersion\" : null, \"engineVersion\" : null } ","excerpt":"Follow the procedures in this section to install and deploy the Nuix …","ref":"/getting-started/rest/installation/docker.html","title":"Docker"},{"body":"The topics in this section provide instructions, guidance, and examples for accessing and using the core features of the Nuix RESTful API. For each endpoint described within this guide, instructions are provided using simple cURL commands. Any tool capable of making HTTP calls, such as Postman, can be used to achieve the same results.\nUse the API reference documentation embedded in your instance of Nuix RESTful Service, localhost:8080/nuix-restful-service/svc/docs, to supplement the instructions in these guides.\n","excerpt":"The topics in this section provide instructions, guidance, and …","ref":"/getting-started/rest/quick_start.html","title":"Quick Start Guides"},{"body":"An authentication token is required to access most endpoints within the Nuix RESTful Service API. To get an authentication token, a request must be submitted to the API to retrieve a license from your configured NMS instance. If the requested license is available on the licensing server, an authentication token will be issued in the request response. This token can then be used during your session to make authenticated calls to the API.\nNote: Based on the configuration of your installation of Nuix RESTful Service, your authentication token may expire if your session becomes inactive after a period of time. If this occurs, a new token must be retrieved using the steps within this topic.  Within this topic, you’ll learn how to:\n Identify which Nuix license types are available for use. Request an authentication token. Release your license to end your session.  License Availability Nuix offers several different license types that provide various functionality for different use cases. When submitting a request to retrieve an authentication token, you may want to know what license types are available to you.\nCheck which Nuix license types are available on your configured NMS instance using the following GET request to the /licenses endpoint.\ncURL:\ncurl -X GET \"http://127.0.0.1:8080/nuix-restful-service/svc/licenses\" -H \"accept: application/vnd.nuix.v1+json\" If the license server is accessible, a response similar to the following shortened example will be returned. The response includes details about each license type that exists on the configured licensing server.\nIdentify the license type that meets the needs of your job, then locate its associated short name. The short name is used during license acquisition to request a specific license type.\nResponse:\n{ \"shortname\": \"enterprise-workstation\", \"count\": 8, \"configuredCount\": 10, \"description\": \"Nuix eDiscovery Workstation\", \"workers\": 6, \"configuredWorkers\": 10, \"audited\": false, \"auditThreshold\": 0, \"source\": null, \"type\": null, \"location\": null, \"expiry\": null, \"legalHoldHoldCountLimit\": null, \"concurrentUserLimit\": null, \"canChooseWorkers\": null } License Acquisition A license is required in order to gain full access to the Nuix REST API. When you request a license, you are issued an authentication token that can then be used in all subsequent requests to the API.\nSubmit a request to retrieve a license and authentication token from your licensing server using the following PUT request to the /authenticatedUsers/login endpoint.\ncURL:\ncurl -L -X PUT 'http://127.0.0.1:8080/nuix-restful-service/svc/authenticatedUsers/login' \\ -H 'Content-Type: application/json' \\ --data-raw '{ \"username\": \"user1\", \"password\": \"password\", \"licenseShortName\": \"enterprise-workstation\", \"workers\": 2 }' In the above example, four parameters are submitted in the body of the request as JSON.\n username: The username for an account that has access to the licensing server. password: The password associated with the username. licenseShortName: (Optional) The short name of the license to be retrieved. workers: (Optional) The number of workers to request with the license.  Both licenseShortName and workers are optional parameters. If left undefined, Nuix will retrieve and assign the first license returned in the response to the /licenses endpoint. Additionally, if the selected license type supports the use of workers, a default value of one or two workers, assigned by the Nuix Engine, will also be assigned.\nNote: Workers are a consumable entity within your environment like licenses. If no workers are available at the time that a license is requested, no workers will be assigned. Similarly, if many workers are requested, but only a few are available, a subset of the total requested workers equal to the number of available workers will be assigned.  The following response to the previous license acquisition request displays the issued authentication token, retrieved license type, and the number of workers that have been assigned to the license.\nResponse:\n{ \"username\": \"user1\", \"authToken\": \"49e225d7-b88d-4d1b-9cbc-296e83706a60\", \"licenseShortName\": \"enterprise-workstation\", \"workersGranted\": 1 } After obtaining the authentication token, provide it within the header of all subsequent calls to make authenticated requests to the API.\nFor example:\nWhen checking the server status by calling the /about endpoint, if the request is made using the authentication token, the response will include details about the REST server instead of null values.\ncURL:\ncurl -L -X GET 'http://127.0.0.1:8080/nuix-restful-service/svc/about' \\ -H 'nuix-auth-token: 49e225d7-b88d-4d1b-9cbc-296e83706a60' Response:\n{ \"server\" : \"http://127.0.0.1:8080/nuix-restful-service/svc\", \"serverId\" : \"rest-oem-server\", \"startupTime\": 1602193993435, \"nuixRestfulVersion\": \"8.8.0\", \"engineVersion\": \"8.8.0.37\" } License Revocation When you are finished making calls to the Nuix RESTful Service API, it is best practice to end your session. Performing this action revokes your authentication key and returns your license and any assigned workers back to the licensing server for other users to consume.\nSubmit a DELETE call to the /authenticatedUsers/{username)endpoint, specifying the username used to log in and your authentication token in the header of the request to revoke your license and authentication token.\ncURL:\ncurl -L -X DELETE 'http://127.0.0.1:8080/nuix-restful-service/svc/authenticatedUsers/user1' \\ -H 'nuix-auth-token: 49e225d7-b88d-4d1b-9cbc-296e83706a60' At the time of performing this request, if your session is active with running or queued functions, you will be asynchronously logged out. This default behavior allows the session to remain active until the functions have completed. At that time, the session will end, and your license will be returned.\nResponse:\n{ \"success\": true } ","excerpt":"An authentication token is required to access most endpoints within …","ref":"/getting-started/rest/quick_start/licensemanagement.html","title":"Manage Licenses with REST"},{"body":"Overview When you run a script in Nuix you can think of your script as being at an inner most level in a series of nested technologies:\nA Java Virtual Machine (JVM) executes the code of Nuix. Nuix in turn relies on one of several interpreter libraries to run your script:\n JRuby to run Ruby code Jython to run Python code Rhino to run ECMA Script (AKA Javascript) code  Your script then makes calls into the Nuix API (which is written in Java) facilitated by the intervening interpreter which provides a translation layer between your script’s code and the Nuix API. The interpreter presents objects exposed by the Nuix API in a manner which makes them seem (mostly) native to the scripting language you employ.\nWhen using the Java Engine API, this concept is inverted slightly. Rather than Nuix using an interpreter such as JRuby to run your script’s code, your Java code runs in the JVM and then invokes methods in the Nuix API:\nThis provides several benefits:\n You can develop your code in an Integrated Development Environment (IDE) such as Eclipse, IntelliJ or NetBeans. Write your code in the statically typed language Java. Compile your code into a single JAR file rather than having a series of script files.  This also means that the code you write has some additional work to perform before making use of the Nuix API. When running a script in Nuix Workstation, either through the Graphical User Interface (GUI) or nuix_console.exe (the “headless” version of Nuix Workstation), you can rely on a few things having already happened:\n Nuix has started and therefore the Nuix Engine has been initialized. A license has been obtained.  When developing an application using the Java Engine API, your code is responsible for taking the steps to initialize the Nuix Engine and get it licensed before you begin interacting with the Nuix API.\nSetup The first thing you need to do is download a Nuix Java Engine API release. This contains all the Nuix code and dependencies. The latest release of the Java Engine API can be downloaded here:\nhttps://download.nuix.com/releases/engine\nOnce downloaded, extract the contents of the downloaded Zip file to a directory accessible to your IDE. Ideally the directory name should be relatively short, for example:\nC:\\engine-releases\\8.0.3.121\nNote Storing the engine release in a longer directory name can pose potential issues later when Nuix Worker processes are started for something Processing, OCR or Exporting due to the way some information is passed to the workers about the class path.  Additionally you need to add some entries into the PATH environment variable so that Nuix can resolve some of its dependencies properly at run-time. The PATH environment variable needs entries pointing to the bin and bin/x86 sub-directories of the engine release. For example, if you have extracted your engine release to C:\\engine-releases\\8.0.3.121 you will want to add the following directories to you PATH environment variable:\n C:\\engine-releases\\8.0.3.121\\bin C:\\engine-releases\\8.0.3.121\\bin\\x86   Created a new Java project in your IDE of choice. Add all the JAR files in the lib sub-directory of the engine release directory. For example if you have extracted your engine release to C:\\engine-releases\\8.0.3.121 then you will want to add all the JAR files in the directory C:\\engine-releases\\8.0.3.121\\lib to your project’s build path.\nInitializing the Engine In this section we are going to review the basic steps needed to initialize the engine. For a more detailed implementation with some additional features, check out the EngineWrapper class in the GitHub repository Nuix Java Engine Baseline. That project provides a baseline implementation which can be used for your own project.\nBefore your code can make use of the Nuix Java Engine API, several steps need to be accomplished:\n A GlobalContainer instance must be created (if one does not already exist). An Engine instance needs to be created. That Engine instance needs some basic configuration. That Engine instance needs to be licensed by acquiring a license from a license source. Once licensed, we can obtain the Utilities object from our engine instance. This Utilities object acts as our entry point into the rest of the API’s functionality.  Create a GlobalContainer Their can only be one GlobalContainer instance per JVM. In many scenarios your code will likely create a GlobalContainer and Engine instance, make use of the API and then dispose of those things when done with them. In a more advanced scenario you may instead wish to create a GlobalContainer instance and then instantiate and dispose of Engine instances throughout the lifetime of your application.\nYou create a GlobalContainer instance using the nuix.engine.GlobalContainerFactory:\nimport nuix.engine.GlobalContainer; import nuix.engine.GlobalContainerFactory; GlobalContainer container = GlobalContainerFactory.newContainer(); Once you have your GlobalContainer instance you can create an Engine instance. When we create our Engine instance we will need to specify a couple settings:\n user - The user associated with the session, used by the engine to associate a user’s actions to them in case history events. userDataDirs - A directory containing some engine configuration data. Each engine release comes with a recommended base line user data directory in the user-data sub directory. For example, if you extracted your engine release to C:\\engine-releases\\8.0.3.121 then you will want to specify C:\\engine-releases\\8.0.3.121\\user-data.  //Define our engine configuration settings Map\u003cObject,Object\u003e engineConfiguration = new HashMap\u003cObject,Object\u003e(); engineConfiguration.put(\"user\", System.getProperty(\"user.name\")); engineConfiguration.put(\"userDataDirs\", userDataDirs); //Create an engine instance engine = container.newEngine(engineConfiguration); Obtaining a Dongle License Before you can interact with the Nuix Engine API, your engine instance must be licensed. We obtain a license by first obtaining a Licensor from the Engine instance we created. You then ask the Licensor to seek out available licenses, acquiring one of your choosing.\n// Get our engine instance licensor Licensor licensor = engine.getLicensor(); // Define where we want the licensor to look for a license Map\u003cString,Object\u003e licenseOptions = new HashMap\u003cString,Object\u003e(); licenseOptions.put(\"sources\",\"dongle\"); // Ask licensor to see what available licenses it can find Iterable\u003cAvailableLicence\u003e licences = licensor.findAvailableLicences(licenseOptions); // Iterate available licenses, we can then inspect properties of each // license we iterate, acquiring the one that meets our needs, below // we just acquire the first available license. for(AvailableLicence license : licences) { license.acquire(); } Once you have acquired a license, your Engine instance is licensed. You may then obtain a Utilities object using the method Engine.getUtilities. From the Utilities object the rest of the Nuix Engine API is available.\nUtilities utilities = engine.getUtilities(); It is important to note that the Engine object implements Closeable meaning it has a close() method. Calling the close() method releases the license held by the Engine instance, so you will want to call it when you are done using the Nuix Engine API (but not before!).\nObtaining a Server License Obtaining a license from a Nuix Management Server (license server) is similar to obtaining a license from a dongle with a few extra steps:\n You will want to specify where the license server is located. While the license discovery process may be able to determine this on its own eventually, its best to point it in the right direction. You will want to provide credentials used to authenticate with the license server. Your engine instance and the license server communicate over a secure channel, but the engine expects your code to determine whether the certificate of the license server can be trusted or not.  String userName = \"Nuix\"; String password = \"Password\"; // Specify location of license server System.getProperties().put(\"nuix.registry.servers\", \"127.0.0.1\"); // Here is where we provide the engine with logic that will // either trust or reject certificate of license server, below // example trusts all certificates. engine.whenAskedForCertificateTrust(new CertificateTrustCallback() { @Override public void execute(CertificateTrustCallbackInfo info) { System.out.println(\"Trusting certificate blindly!\"); info.setTrusted(true); } }); // We provide credentials for authenticating with the license server // through this callback. engine.whenAskedForCredentials(new CredentialsCallback(){ public void execute(CredentialsCallbackInfo info) { info.setUsername(userName); info.setPassword(password); } }); // Get our engine instance licensor Licensor licensor = engine.getLicensor(); // Define where we want the licensor to look for a license Map\u003cString,Object\u003e licenseOptions = new HashMap\u003cString,Object\u003e(); licenseOptions.put(\"sources\",\"server\"); // Ask licensor to see what available licenses it can find Iterable\u003cAvailableLicence\u003e licences = licensor.findAvailableLicences(licenseOptions); // Iterate available licenses, we can then inspect properties of each // license we iterate, acquiring the one that meets our needs, below // we just acquire the first available license. for(AvailableLicence license : licences) { license.acquire(); } Simple Example Note this example just demonstrates the basic steps involved and does not include proper error handling. See the EngineWrapper class in the Nuix Java Engine Baseline repository on GitHub for a more fleshed out implementation.\npackage com.nuix.engineexample; import nuix.Utilities; import nuix.engine.AvailableLicence; import nuix.engine.Engine; import nuix.engine.GlobalContainer; import nuix.engine.GlobalContainerFactory; import nuix.engine.Licensor; public class EngineSetup { private static GlobalContainer container = null; public static Utilities intializeEngine(File userDataDirs){ Engine engine = null; // Create global container if it does not already exist \tif(container == null){ container = GlobalContainerFactory.newContainer(); } //Define our engine configuration settings \tMap\u003cObject,Object\u003e engineConfiguration = new HashMap\u003cObject,Object\u003e(); engineConfiguration.put(\"user\", System.getProperty(\"user.name\")); engineConfiguration.put(\"userDataDirs\", userDataDirs); //Create an engine instance \tengine = container.newEngine(engineConfiguration); // Get our engine instance licensor \tLicensor licensor = engine.getLicensor(); // Define where we want the licensor to look for a license \tMap\u003cString,Object\u003e licenseOptions = new HashMap\u003cString,Object\u003e(); licenseOptions.put(\"sources\",\"dongle\"); // Ask licensor to see what available licenses it can find \tIterable\u003cAvailableLicence\u003e licences = licensor.findAvailableLicences(licenseOptions); // Iterate available licenses, we can then inspect properties of each \t// license we iterate, acquiring the one that meets our needs, below \t// we just acquire the first available license. \tfor(AvailableLicence license : licences) { license.acquire(); } // If everything has worked up to this point, our engine instance should \t// be licensed, so now we can obtain the Utilities object from the engine \t// and return it to the caller. The Utilities object then acts as the \t// entry point into the rest of the API. \t// \t// Note: Engine.close() should be called when we are done using the API and \t// ready to release the obtained license. In this example we are expecting \t// the caller will do this! \treturn engine.getUtilities(); } } ","excerpt":"Overview When you run a script in Nuix you can think of your script as …","ref":"/getting-started/java_engine/java-engine.html","title":"Using the Java Engine"},{"body":"All data that is ingested and processed using the Nuix Engine is done so within a Nuix case. The case acts as a container for the collections of data and evidence related to an investigation. Nuix supports two types of cases:\n Simple: A single case that contains all data for an investigation. Compound: A collection of two or more related simple cases that can be accessed concurrently as a single large case.  After choosing the type of case best suited for your purpose, you can ingest evidence and begin any required post processing activities. All cases that are created are saved within your case inventory, which was defined during the installation of Nuix RESTful Service.\nWithin this topic, you’ll learn how to:\n Create a new case. View existing cases. Close a case. Delete a case.  Creating a Case New cases can be created by submitting a POST request to the /cases endpoint. Use the following request to create a simple case. For information on creating other case types, such as compound or elastic-based cases, refer to the Nuix RESTful Service API reference documentation.\ncURL:\ncurl -L -X POST 'http://127.0.0.1:8080/nuix-restful-service/svc/cases' \\ -H 'nuix-auth-token: 49e225d7-b88d-4d1b-9cbc-296e83706a60' \\ -H 'Content-Type: application/json' \\ --data-raw '{ \"compound\": false, \"location\": \"inventory0\", \"name\": \"MyNuixCase\", \"description\": \"A simple case created using the REST API\", \"investigator\": \"Your Name\" }' In the example above, five parameters are submitted in the body of the request as JSON as well as an authentication token in the header of the request.\n compound: The type of case to create. A value of false will create a simple case. location: A relative or absolute path that is within the defined inventory location used by REST where the case will be saved. A value of inventory0 references the first defined inventory location within your installation of REST. name: A unique name to identify the case. This value also defines the name of the directory which contains the case on the file system. description: (Optional) A brief description to indicate the contents or purpose of the case. Investigator: The name of the person creating the case.  After submitting the request, details about the newly created case are included in the response, including the caseId of the case. The caseId value is a required parameter in all requests involving a case.\nResponse:\n{ \"caseId\": \"0eedda2d297046ae8e67fbda9f192df9\", \"name\": \"MyNuixCase\", \"path\": \"C:\\\\Program Files\\\\Nuix\\\\Nuix RESTful Service\\\\cases\\\\MyNuixCase\", \"description\": \"A simple case created using the REST API\", \"investigator\": \"Your Name\", \"creationDate\": 1602818339843, \"compound\": false, \"elastic\": false, \"binaryStoreLocation\": \"\", \"indexId\": \"\", \"caseSize\": 0, \"casePathParent\": \"C:\\\\Program Files\\\\Nuix\\\\Nuix RESTful Service\\\\cases\", \"caseInvestigationTimeZone\": \"America/New_York\", \"hasExclusions\": null, \"hasNuixSystemTags\": null, \"hasProductionSets\": null, \"hasCalculatedAuditSize\": null, \"casePath\": \"C:\\\\Program Files\\\\Nuix\\\\Nuix RESTful Service\\\\cases\\\\MyNuixCase\", \"caseName\": \"MyNuixCase\", \"caseCreationDate\": 1602818339843, \"caseDescription\": \"A simple case created using the REST API\", \"caseInvestigator\": \"Your Name\" } Identifying Existing Cases If cases have already been created within your inventory, they can be identified by submitting a GET request to the /inventory/digest endpoint with your authentication token. Doing so will return information on all cases that exist within your configured inventory locations.\nThis request can be helpful if you need to lookup details about a case, such as its caseId.\ncURL:\ncurl -L -X GET 'http://127.0.0.1:8080/nuix-restful-service/svc/v1/inventory/digest' \\ -H 'nuix-auth-token: 49e225d7-b88d-4d1b-9cbc-296e83706a60' \\ Response:\n[ { \"caseId\": \"0eedda2d297046ae8e67fbda9f192df9\", \"name\": \"MyNuixCase\", \"path\": \"C:\\\\ProgramData\\\\Nuix\\\\NuixCases\\\\MyNuixCase\", \"description\": \"A case created using the REST API\", \"investigator\": \"Your Name\", \"creationDate\": 1609909619982, \"compound\": false, \"elastic\": false, \"binaryStoreLocation\": \"\", \"indexId\": \"\", \"productName\": \"Nuix\", \"version\": \"8.7.1\", \"isOpen\": true, \"childCases\": [], \"url\": \"http://10.101.100.66:8080\", \"serverId\": \"fdfc0544-4421-40df-bbd6-a200371b200d\" } ] Closing a Case Any time a new case is created, or an existing case is used in a request, the case is considered open. When cases are opened, they become locked to prevent other users from accessing the case at the same time.\nThe status of a case can be determined by calling the /inventory/digest endpoint or the /inventory/{caseId} endpoint, if the caseId is known, to retrieve details about the case.\nThe response body to these requests includes the following parameter.\n\"isOpen\": true A value of true indicates that the case is open.\nWhen you are finished working with a case, it should be closed so that it becomes unlocked and available to other users.\nTo close a case, submit a POST request to the /cases/{caseId}/close endpoint.\ncURL:\ncurl -L -X POST 'http://127.0.0.1:8080/nuix-restful-service/svc/cases/0eedda2d297046ae8e67fbda9f192df9/close' \\ -H 'nuix-auth-token: 49e225d7-b88d-4d1b-9cbc-296e83706a60' Response:\n{ \"success\": true } Deleting a Case To delete a case from your inventory, submit a DELETE request to the /cases/{caseId} endpoint.\ncURL:\ncurl -L -X DELETE 'http://127.0.0.1:8080/nuix-restful-service/svc/cases/0eedda2d297046ae8e67fbda9f192df9' \\ -H 'nuix-auth-token: fabbd5b7-8e4d-4af8-a970-feed76a34f46' Response:\n{ \"caseId\": \"0eedda2d297046ae8e67fbda9f192df9\", \"success\": true, \"childCases\": null } ","excerpt":"All data that is ingested and processed using the Nuix Engine is done …","ref":"/getting-started/rest/quick_start/inventorymanagement.html","title":"Manage Cases within your Inventory"},{"body":"Use the following topic to enable unified logging using the Elasticsearch ELK stack.\nPrerequisites  Elasticsearch v7.8.1 Filebeat v7.8.1 Kibana v7.8.1 Nuix REST v9.0  This topic assumes that you already have a running instance of Nuix RESTful Service version 9.0 installed at the following location:\n Windows: C:\\Program Files\\Nuix\\Nuix RESTful Service Linux: /opt/nuix-restful-service  The installation and configuration of Elasticsearch and Kibana are outside the scope of this topic.\nNote Before proceeding, ensure that the installed Nuix-REST service is not running.  Windows Filebeat Installation and Configuration Use the following procedure to install Filebeat on Windows:\n  Download Filebeat (https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-7.8.1-windows-x86_64.zip)\n  Unzip the Filebeat installer to C:\\Program Files\\Filebeat.\n  Navigate to the C:\\Program Files\\Filebeat installation directory.\n  Rename filebeat.yml to filebeat.yml.backup.\n  Create a new filebeat.yml file in C:\\Program Files\\Filebeat and include the following configuration.\n Click to View Windows Filebeat Configuration filebeat.yaml filebeat.inputs:- type: logenabled:truepaths:- 'C:\\Program Files\\Nuix\\Nuix RESTful Service\\logs\\**\\*.json'json.message_key:messagejson.keys_under_root:truejson.overwrite_keys:truejson.add_error_key:trueprocessors:- rename:fields:- from:\"file\"to:\"file.source\"ignore_missing:trueoutput.elasticsearch:hosts:'masterdata-node-0.elasticsearch.aws.chdev.nuix.com'    Open a command prompt with elevated administrative priviledges and navigate to C:\\Program Files\\Filebeat.\n  Enter the following command to install Filebeat in UnRestricted mode. Choose [R] to Run Once.\n  PowerShell.exe -ExecutionPolicy UnRestricted -File .\\install-service-filebeat.ps1 Filebeat is now installed and configured as a service but is not yet running.\nLinux Filebeat Installation and Configuration Use the following procedure to install Filebeat on Linux:\n  Download Filebeat using the following command:\ncurl -L -O https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-7.10.1-amd64.deb   Install Filebeat using the following command:\nsudo dpkg -i filebeat-7.8.1-amd64.deb   Navigate to the installation directory and create a backup of the Filebeat configuration file:\ncd /etc/filebeat sudo mv filebeat.yml filebeat.yml.backup   Within the same directory, create a new filebeat.yml file and include the following configuration.\n Click to View Linux Filebeat Configuration filebeat.yaml filebeat.inputs:- type: logenabled:truepaths:- '/opt/nuix-restful-service/logs/**/*.json'json.message_key:messagejson.keys_under_root:truejson.overwrite_keys:truejson.add_error_key:trueprocessors:- rename:fields:- from:\"file\"to:\"file.source\"ignore_missing:trueoutput.elasticsearch:hosts:'masterdata-node-0.elasticsearch.aws.chdev.nuix.com'    Filebeat is now installed and configured as a service but is not yet running.\nNuix RESTful Service Configuration Changes Use the following procedures to configure the logging settings within your instance of Nuix RESTful Service.\nApplication Log Configuration  Navigate to the settings directory within your Nuix RESTful Service installation and locate application.properties.   Windows: C:\\Program Files\\Nuix\\Nuix RESTful Service\\settings\\application.properties Linux: /opt/nuix-restful-service/settings/application.properties   Using a text editor with elevated administrative priviledges, open application.properties.\n  Add the following property to the file to configure Nuix RESTful Service to generate JSON formatted log files.\nlogging.json.enabled=true   After adding this property and saving the file, the new defaut log becomes ${logging.path}\\nuix-rest.log.json.\nWorker Log Configuration  Navigate to the Nuix RESTful Service installation directory and locate the Nuix-REST.vmoptions file.   Windows: C:\\Program Files\\Nuix\\Nuix RESTful Service\\Nuix-REST.vmoptions Linux: /opt/nuix-restful-service/nuix-rest.vmoptions  Using a text editor with elevated administrative priviledges, open Nuix-REST.vmoptions. Locate the -Dnuix.worker.jvm.arguments property and make the following modification to change its value from log4j.properties to the log4j-logstash.xml configuration that ships with the application. This change configures workers to generate JSON formatted log files.  Windows:\n-Dnuix.worker.jvm.arguments=-Dlog4j.configuration=file:/C:/Program%20Files/Nuix/Nuix%20RESTful%20Service/nuix-engine/config/log4j-logstash.xml Linux:\n-Dnuix.worker.jvm.arguments=-Dlog4j.configuration=file:/opt/nuix-restful-service/nuix-engine/config/log4j-logstash.xml After modifying this property and saving the file, the new default worker log becomes ${logging.path}\\job-${UUID}\\${UUID2}.\nServices Start up all installed services once Filebeat and Nuix RESTful Service have been installed and configured.\n Start the Nuix REST service  On Linux: sudo service nuix-rest start   Start the Filebeat service  On Linux: sudo service filebeat start    Log Viewing Logs can now be viewed using Kibana. The installation and configuration of Kibana is outside the scope of this article, however, you can quickly look at logs if you have Docker installed using the following Docker command:\ndocker run -it \\  -e ELASTICSEARCH_HOSTS=http://your.elasticsearch.node.com:9200 \\  -p 5601:5601 \\  -e XPACK_SECURITY_ENABLED=false \\  -e MONITORING_ENABLED=false \\  -e XPACK_ML_ENABLED=false \\  -e XPACK_GRAPH_ENABLED=false \\  -e XPACK_REPORTING_ENABLED=false \\  docker.elastic.co/kibana/kibana:7.8.1 In a browser, navigate to http://localhost:5601\n","excerpt":"Use the following topic to enable unified logging using the …","ref":"/getting-started/rest/configuration/unifiedlogging.html","title":"Unified Logging with Elasticsearch"},{"body":"After acquiring a license and creating a case, you can then begin ingesting data into the case using the Nuix Engine. Nuix RESTful Service provides a number of endpoints that can be used to ingest data from different data sources. These endpoints are described within the Processing category of the Nuix RESTful Service API reference documentation.\nWithin this topic, you’ll learn how to:\n Perform a simple ingestion. Checking the status of the request.  Ingesting Data into a Case When processing data into a Nuix case, there are many configurable parameters that can be used to tailor what data is retrieved, how it is processed, where it is stored, and what resources should be used to perform the work. The settings used are often determined by the type of investigation being performed and the level of detail that is required.\nDetails about these parameters can be found within the reference documentation for the endpoint.\nFor the purposes of this example, a simple ingestion can be performed by submitting a POST request to the /cases/{caseId}/evidence/file endpoint. This request ingests the contents of a single file or directory into an evidence container within the case using basic processing settings.\ncURL:\ncurl -L -X POST 'http://127.0.0.1:8080/nuix-restful-service/svc/v1/cases/0eedda2d297046ae8e67fbda9f192df9/evidence/file' \\ -H 'nuix-auth-token: 49e225d7-b88d-4d1b-9cbc-296e83706a60' \\ -H 'Content-Type: application/json' \\ --data-raw '{ \"container\": { \"custodian\": \"John Doe\", \"name\": \"Evidence Container 1\" }, \"target\": { \"path\": \"C:/LocationOfData\" }, \"processorSettings\": { \"analysisLanguage\" : \"en\", \"processText\" : true, \"reportProcessingStatus\": \"physical_files\", \"traversalScope\" : \"full_traversal\" } }' In the example above, the following parameters are submitted in the body of the request as raw data.\n custodian: The name of the person who owns the data being ingested. name: The name of the evidence container where the custodian’s data is being ingested. path: The absolute path to the file or directory being ingested. analysisLanguage: The language to use for text analysis when indexing the data. processText: Store and index the text of data items. reportProcessingStatus: Calculates the physical file size of the evidence before ingestion. This data can then be used to report the progress of the ingestion. traversalScope: Indicates what files should be processed. The full_traversal value ensures that all loose files and forensic images are processed, including their contents.  Any number and combination of parameters can be submitted in the request. If you find that you use consistent processor settings when performing ingestions, an external processing profile can also be used to supply the settings rather than defining them individually within the body of the request.\nTo use a processing profile, specify the name of the profile using the processingProfile parameter. The profile must exist within the ..\\nuix-engine\\user-data\\Processing Profiles directory of your REST installation.\nSee the reference documentation for the endpoint to learn more about available parameters.\nResponse:\n{ \"functionKey\": \"72744ec6-6de1-488c-bbec-ff27b64974e3\", \"location\": \"http://127.0.0.1:8080/nuix-restful-service/svc/v1/asyncFunctions/72744ec6-6de1-488c-bbec-ff27b64974e3\" } Checking the Status of a Function After submitting the request to perform an ingestion, a response is returned which includes a functionKey and location.\nThe function key is a unique identifier for the request that can be used to query its status. The location URL provides a request to the /asyncFunctions/{key} endpoint, which when called, returns the status and other information about the associated function.\nNote The results of asynchronous functions, such as ingestion, are only maintained for five minutes after the completion of the function.  The following response is returned after calling the location URL from the previous ingestion request. This response can also be returned by submitting a GET request to the /asyncFunctions/{key} endpoint using the function key from the ingestion request shown earlier in the topic.\nThis response includes granular details about the ingestion request, including:\n Status of the function Details about the request Processing settings used High level details about the ingested data  Response:\n{ \"done\": true, \"cancelled\": false, \"result\": true, \"token\": \"49e225d7-b88d-4d1b-9cbc-296e83706a60\", \"functionKey\": \"72744ec6-6de1-488c-bbec-ff27b64974e3\", \"progress\": 135591, \"total\": 135591, \"percentComplete\": 100.0000, \"updatedOn\": 1610047993132, \"status\": null, \"statusId\": null, \"requestTime\": 1610047968056, \"startTime\": 1610047968056, \"finishTime\": 1610047996497, \"caseId\": \"8ca047e086aa4497bc311ef5cb4bada7\", \"caseName\": \"MyNuixCase\", \"hasSuccessfullyCompleted\": true, \"friendlyName\": \"Evidence Ingestion Function\", \"caseLocation\": \"C:\\\\ProgramData\\\\Nuix\\\\NuixCases\\\\MyNuixCase\", \"requestor\": \"user1\", \"action\": \"AsyncBulkIngestionFunction\", \"options\": { \"reloadQuery\": null, \"processorSettings\": { \"processText\": true, \"processLooseFileContents\": null, \"processForensicImages\": null, \"analysisLanguage\": \"en\", \"stopWords\": null, \"stemming\": null, \"enableExactQueries\": null, \"extractNamedEntities\": null, \"extractNamedEntitiesFromText\": null, \"extractNamedEntitiesFromProperties\": null, \"extractNamedEntitiesFromTextStripped\": null, \"extractShingles\": null, \"processTextSummaries\": null, \"calculateSSDeepFuzzyHash\": null, \"detectFaces\": null, \"extractFromSlackSpace\": null, \"carveFileSystemUnallocatedSpace\": null, \"carveUnidentifiedData\": null, \"carvingBlockSize\": null, \"recoverDeletedFiles\": null, \"extractEndOfFileSlackSpace\": null, \"smartProcessRegistry\": null, \"identifyPhysicalFiles\": null, \"createThumbnails\": null, \"skinToneAnalysis\": null, \"calculateAuditedSize\": null, \"storeBinary\": null, \"maxStoredBinarySize\": null, \"maxDigestSize\": null, \"digests\": [], \"addBccToEmailDigests\": null, \"addCommunicationDateToEmailDigests\": null, \"reuseEvidenceStores\": null, \"processFamilyFields\": null, \"hideEmbeddedImmaterialData\": null, \"reportProcessingStatus\": null, \"workerItemCallback\": null, \"workerItemCallbacks\": null }, \"evidence\": [ { \"guid\": null, \"name\": \"Evidence Container 2\", \"customMetadata\": null, \"encoding\": null, \"custodian\": \"Jane Doe\", \"timeZone\": null, \"description\": null, \"locale\": null, \"files\": [ { \"path\": \"C:/LocationOfData\" } ], \"exchangeMailboxes\": null, \"s3Buckets\": null, \"sqlServers\": null, \"enterpriseVaults\": null, \"sharepointSites\": null, \"mailStores\": null, \"loadFiles\": null, \"centeraClusters\": null, \"splitFiles\": null, \"dropboxes\": null, \"sshServers\": null } ], \"localWorkerCount\": 2, \"repositories\": [], \"parallelProcessingSettings\": { \"workerCount\": null, \"workerMemory\": null, \"workerTemp\": null, \"brokerMemory\": null, \"workerBrokerAddress\": null, \"useRemoteWorkers\": false, \"embedBroker\": true }, \"rescanEvidenceRepositories\": false, \"loadProcessingJob\": { \"casePath\": \"C:\\\\ProgramData\\\\Nuix\\\\NuixCases\\\\MyNuixCase\", \"jobGuid\": \"989b79fe-43e6-4fa4-9466-19ea3d5ef644\", \"processingMode\": \"Load\", \"startDate\": 1610047968374, \"workerCount\": 2, \"finished\": true, \"paused\": false, \"masterAddress\": \"10.20.100.50\", \"bytesProcessed\": 135591, \"itemsProcessed\": 12, \"jobSizeTotalBytes\": 135591 } }, \"participatingInCaseFunctionQueue\": true, \"processedBy\": \"fdfc0544-4421-40df-bbd6-a200371b200d\", \"errorMsg\": null } ","excerpt":"After acquiring a license and creating a case, you can then begin …","ref":"/getting-started/rest/quick_start/processingdata.html","title":"Process Data into a Nuix Case"},{"body":"Visit the Nuix Organization on GitHub to view all of the available scripts and examples that are available.\nThe following table identifies the top 50 most popular Nuix repositories as of December 2019.\n   Name Description     NX A Java library which provides simplified Java Swing components, simplifying creating a settings dialog or displaying a progress dialog from a script in Nuix   Search Module A script to bulk search and tag items in a Nuix case.   Export-Profile-Plus A script for exporting case metadata into various formats or as custom metadata fields   NuixUCRT This is the Nuix Universal Case Reporting Tool   Custom-Exporter Assists with creating exports with custom numbering/naming and pathing   Reg Ripper Integrates RegRipper with Nuix Workstation   Regex-Scanner Scan item text and properties with a series of regular expressions. Capture results as a report, tags or custom metadata.   Tiered-Report This script allows you to define and generate reports on data ingested into one or more Nuix cases   Communication-Scanner Scan and tag email items based on the email addresses present on them.   SuperUtilities A library of helper methods built on top of the Nuix API   Custodian-Export Export items by custodian.   Nukers Sometimes you need an easy way to just remove some work product almost entirely from a case.   Case-Migration-Script Migrates a list of Nuix cases to the latest case version.   Top-Level-Dupe-Info-Propagation Annotates top level items and their descendants with information about duplicate custodians and duplicate paths.   Investigator-Report A script to export a standalone hyperlinked HTML report allowing someone to review item information   PDF-and-Text-Importer This script provides a way to import text and PDF files into a Nuix case by matching file names to items by either MD5 or GUID   Bulk-Ingestron This script provides a way to bulk ingest data into one or more cases.   Annotate-From-CSV Annotate Nuix case items in bulk using a CSV   Yara-Integration Integrate Yara binary scanning tool with Nuix Workbench   Intersection-Report Generate a report where a series of values are generated based on each row and column query combination   Export-Family-PDFs A script which can export multiple family member items into a single PDF with bookmarks   Scripted-Metadata-Profile-Fields A collection of scripted metadata profile fields which can be included in a Nuix metadata profile   Bulk-Redactor A script offering functionality similar to the bulk redaction functionality in the Nuix Workbench user interface, with some added goodies   Nuix-Collector-Integration Script to generate Nuix Collector job files   Change-Evidence A script to alter the base directory associated with source data which has been ingested into a Nuix case   Batched-OCR Performs batch OCR by breaking a collection items into a series of smaller batches and performing OCR on each smaller batch in turn.   Scrape-Links A script which can capture URLs in the body of emails, including those which may not be represented in the plain text email body   Cluster-Export Export items by cluster.   Language-Translation Translates item text into another language   Batch-Load-Report A script which generates a report with information regarding batch loads present in a case such as batch load elapsed time   Item-Data-Propagator This scripts provides a way to propagate tags, custom metadata and text from a given selection of items to related items.   EV-Manager A script to assist with ingesting Enterprise Vault data into Nuix   Create-Tag-Batches This script allows you to tag items in batches based on number of items or number of batches.   Term-Explorer A script which provides a user interface to explore the terms present in a Nuix case   Associate-Google-Vault-Data Associates Google Vault XML data to items in the case.   Annotation-Export-Import A script which provides a way to export annotations from one case and then import them back in to another case   Annotate-Evidence-Info Annotate information from an evidence container onto its descendant item, such as default time zone and character set.   PDF-Word-Counter A script which adds custom metadata fields for “Word Count” and “Words Per Page” to searchable PDFs   Named-Entity-Redactor Takes named entity matches, redacts them from text and metadata, then records the redacted versions of those values as custom metadata.   Annotate-Root-Item-Path Records top N items of item path as custom metadata on each item processed   Presentation-Script-Console A script offering a control with similar functionality to the Nuix script console with the goal of being more presentation friendly.   OPT-Image-Importer A script which provides a way to load a series of images using an OPT into a Nuix case by first converting them to PDF   Strip-Disclaimer-Text Removes disclaimers from email body text so that you don’t get false hits on it.   Fraud-Triangle-Analysis A script which scores items based on presence of opportunity, pressure and rationalization word lists you provide   Language-Translation-Integration A script which integrates with third-party translation services like Google Cloud Translation or Microsoft Cognitive Services, providing a way to translate text of items in a Nuix case   Light-Index-Dedupe Create an item set where deduplication is performed by using an MD5 digest generated from a concatenation of select item properties   Roll-Up-Descendants Append text of immaterial descendants to their parents in an existing Nuix case   SQL-Injection-Scoring This project leverages a Worker Side Script to score log entries processed into Nuix for possible SQL injection attempts. A companion search then helps you review those scores.   Annotate-Comment-Log Captures comments made in a document that are only present in item content text and extracts them to a custom metadata field.   VirusTotal-Integration A script which provides Nuix integration with VirusTotal    ","excerpt":"Visit the Nuix Organization on GitHub to view all of the available …","ref":"/examples.html","title":"Nuix on GitHub"},{"body":"Visit the Nuix Organization on GitHub to view all of the training available.\n","excerpt":"Visit the Nuix Organization on GitHub to view all of the training …","ref":"/tutorials.html","title":"Tutorials"},{"body":"","excerpt":"","ref":"/","title":"Documentation"},{"body":" \t window.onload = function() { const ui = SwaggerUIBundle({ url: \"openapi.yaml\", dom_id: '#ohpen_swagger_ui', presets: [ SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset ] }) window.ui = ui } \t","excerpt":" \t window.onload = function() { const ui = SwaggerUIBundle({ url: …","ref":"/reference/_openapi.html","title":"Open API Documentation"},{"body":"","excerpt":"","ref":"/reference.html","title":"Reference"}]